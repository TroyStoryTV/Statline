{"version":3,"sources":["contexts/BuildsContext.tsx","components/BuildDropdown.tsx","components/StatlineModal.tsx","components/StatlineButton.tsx","App.tsx","index.tsx"],"names":["BuildsContext","createContext","undefined","BuildsProvider","_ref","children","builds","useState","id","name","stats","PPG","APG","REB","SPG","currentBuild","setCurrentBuild","_jsx","Provider","value","useBuildsContext","context","useContext","Error","BuildDropdown","_jsxs","Dropdown","Toggle","variant","Menu","map","build","Item","onClick","StatlineModal","show","handleClose","selectedBuild","setSelectedBuild","Modal","onHide","Header","closeButton","Title","Body","Form","Check","type","label","onChange","Footer","Button","find","b","console","log","StatlineButton","showModal","setShowModal","_Fragment","App","Container","Row","className","Col","md","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"gNAqBA,MAAMA,EAAgBC,6BAA8CC,GAE9DC,EAAoDC,IAAmB,IAAlB,SAAEC,GAAUD,EACrE,MAAOE,GAAUC,mBAAkB,CACjC,CAAEC,GAAI,EAAGC,KAAM,UAAWC,MAAO,CAAEC,IAAK,GAAIC,IAAK,EAAGC,IAAK,EAAGC,IAAK,IACjE,CAAEN,GAAI,EAAGC,KAAM,UAAWC,MAAO,CAAEC,IAAK,GAAIC,IAAK,EAAGC,IAAK,EAAGC,IAAK,OAG5DC,EAAcC,GAAmBT,mBAAuB,MAE/D,OACEU,cAACjB,EAAckB,SAAQ,CAACC,MAAO,CAAEb,SAAQS,eAAcC,mBAAkBX,SACtEA,GACsB,EAIvBe,EAAmBA,KACvB,MAAMC,EAAUC,qBAAWtB,GAC3B,IAAKqB,EACH,MAAM,IAAIE,MAAM,yDAElB,OAAOF,CAAO,ECpBDG,MAnBiBA,KAC9B,MAAM,OAAElB,EAAM,aAAES,EAAY,gBAAEC,GAAoBI,IAElD,OACEK,eAACC,IAAQ,CAAArB,SAAA,CACPY,cAACS,IAASC,OAAM,CAACC,QAAQ,UAAUpB,GAAG,iBAAgBH,SACnDU,EAAeA,EAAaN,KAAO,iBAEtCQ,cAACS,IAASG,KAAI,CAAAxB,SACXC,EAAOwB,KAAKC,GACXd,cAACS,IAASM,KAAI,CAAgBC,QAASA,IAAMjB,EAAgBe,GAAO1B,SACjE0B,EAAMtB,MADWsB,EAAMvB,UAKrB,E,wBCmCA0B,MA7CqC9B,IAA4B,IAA3B,KAAE+B,EAAI,YAAEC,GAAahC,EACxE,MAAM,OAAEE,GAAWc,KACZiB,EAAeC,GAAoB/B,mBAAwB,MAElE,OACEkB,eAACc,IAAK,CAACJ,KAAMA,EAAMK,OAAQJ,EAAY/B,SAAA,CACrCY,cAACsB,IAAME,OAAM,CAACC,aAAW,EAAArC,SACvBY,cAACsB,IAAMI,MAAK,CAAAtC,SAAC,mBAEfY,cAACsB,IAAMK,KAAI,CAAAvC,SACTY,cAAC4B,IAAI,CAAAxC,SACFC,EAAOwB,KAAKC,GACXd,cAAC4B,IAAKC,MAAK,CAETC,KAAK,QACLtC,KAAK,QACLuC,MAAOjB,EAAMtB,KACbwC,SAAUA,IAAMX,EAAiBP,EAAMvB,KAJlCuB,EAAMvB,UASnBiB,eAACc,IAAMW,OAAM,CAAA7C,SAAA,CACXY,cAACkC,IAAM,CAACvB,QAAQ,YAAYK,QAASG,EAAY/B,SAAC,UAGlDY,cAACkC,IAAM,CACLvB,QAAQ,UACRK,QAASA,KACP,GAAsB,OAAlBI,EAAwB,CAC1B,MAAMN,EAAQzB,EAAO8C,MAAMC,GAAMA,EAAE7C,KAAO6B,IACtCN,GACFuB,QAAQC,IAAIxB,EAAMrB,MAEtB,CACA0B,GAAa,EACb/B,SACH,oBAIG,ECnCGmD,MAXkBA,KAC/B,MAAOC,EAAWC,GAAgBnD,oBAAS,GAE3C,OACEkB,eAAAkC,WAAA,CAAAtD,SAAA,CACEY,cAACkC,IAAM,CAAClB,QAASA,IAAMyB,GAAa,GAAMrD,SAAC,aAC3CY,cAACiB,EAAa,CAACC,KAAMsB,EAAWrB,YAAaA,IAAMsB,GAAa,OAC/D,E,wBCWQE,MAhBOA,IAElB3C,cAACd,EAAc,CAAAE,SACbY,cAAC4C,IAAS,CAAAxD,SACRY,cAAC6C,IAAG,CAACC,UAAU,4BAA2B1D,SACxCoB,eAACuC,IAAG,CAACC,GAAG,OAAM5D,SAAA,CACZY,cAAA,MAAAZ,SAAI,2BACJY,cAACO,EAAa,IACdP,cAACuC,EAAc,a,MCR3BU,IAASC,OACPlD,cAACmD,IAAMC,WAAU,CAAAhE,SACfY,cAAC2C,EAAG,MAENU,SAASC,eAAe,Q","file":"static/js/main.17fa44ed.chunk.js","sourcesContent":["import React, { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\ninterface Stats {\r\n  PPG: number;\r\n  APG: number;\r\n  REB: number;\r\n  SPG: number;\r\n}\r\n\r\ninterface Build {\r\n  id: number;\r\n  name: string;\r\n  stats: Stats;\r\n}\r\n\r\ninterface BuildsContextProps {\r\n  builds: Build[];\r\n  currentBuild: Build | null;\r\n  setCurrentBuild: (build: Build) => void;\r\n}\r\n\r\nconst BuildsContext = createContext<BuildsContextProps | undefined>(undefined);\r\n\r\nconst BuildsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [builds] = useState<Build[]>([\r\n    { id: 1, name: 'Build 1', stats: { PPG: 10, APG: 5, REB: 7, SPG: 2 } },\r\n    { id: 2, name: 'Build 2', stats: { PPG: 15, APG: 7, REB: 8, SPG: 3 } },\r\n    // Add more builds as needed\r\n  ]);\r\n  const [currentBuild, setCurrentBuild] = useState<Build | null>(null);\r\n\r\n  return (\r\n    <BuildsContext.Provider value={{ builds, currentBuild, setCurrentBuild }}>\r\n      {children}\r\n    </BuildsContext.Provider>\r\n  );\r\n};\r\n\r\nconst useBuildsContext = () => {\r\n  const context = useContext(BuildsContext);\r\n  if (!context) {\r\n    throw new Error('useBuildsContext must be used within a BuildsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { BuildsProvider, useBuildsContext };\r\n\r\n\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { useBuildsContext } from '../contexts/BuildsContext';\r\n\r\nconst BuildDropdown: React.FC = () => {\r\n  const { builds, currentBuild, setCurrentBuild } = useBuildsContext();\r\n\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n        {currentBuild ? currentBuild.name : 'Select Build'}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {builds.map((build) => (\r\n          <Dropdown.Item key={build.id} onClick={() => setCurrentBuild(build)}>\r\n            {build.name}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default BuildDropdown;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { useBuildsContext } from '../contexts/BuildsContext';\r\n\r\ninterface StatlineModalProps {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n}\r\n\r\nconst StatlineModal: React.FC<StatlineModalProps> = ({ show, handleClose }) => {\r\n  const { builds } = useBuildsContext();\r\n  const [selectedBuild, setSelectedBuild] = useState<number | null>(null);\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Select Build</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          {builds.map((build) => (\r\n            <Form.Check\r\n              key={build.id}\r\n              type=\"radio\"\r\n              name=\"build\"\r\n              label={build.name}\r\n              onChange={() => setSelectedBuild(build.id)}\r\n            />\r\n          ))}\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            if (selectedBuild !== null) {\r\n              const build = builds.find((b) => b.id === selectedBuild);\r\n              if (build) {\r\n                console.log(build.stats); // Here you can set the stats to display\r\n              }\r\n            }\r\n            handleClose();\r\n          }}\r\n        >\r\n          Show Stats\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default StatlineModal;\r\n\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport StatlineModal from './StatlineModal';\r\n\r\nconst StatlineButton: React.FC = () => {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={() => setShowModal(true)}>Statline</Button>\r\n      <StatlineModal show={showModal} handleClose={() => setShowModal(false)} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StatlineButton;\r\n\r\n","import React from 'react';\nimport BuildDropdown from './components/BuildDropdown';\nimport StatlineButton from './components/StatlineButton';\nimport { BuildsProvider } from './contexts/BuildsContext';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst App: React.FC = () => {\n  return (\n    <BuildsProvider>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <h1>NBA2K24 Twitch Overlay</h1>\n            <BuildDropdown />\n            <StatlineButton />\n          </Col>\n        </Row>\n      </Container>\n    </BuildsProvider>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}